// === AUTH.JS: warp-ready p≈ôihla≈°ovac√≠ modul ===

// ‚ö†Ô∏è Zajistit inicializaci Firebase
if (typeof firebase === 'undefined' || !firebase.apps.length) {
  if (typeof initializeFirebaseApp === 'function') {
    initializeFirebaseApp();
  } else {
    console.error("‚ùå Funkce initializeFirebaseApp() nen√≠ definov√°na.");
  }
}

// ‚úÖ P≈ôihl√°≈°en√≠ p≈ôes Google
function signInWithGoogle() {
  const provider = new firebase.auth.GoogleAuthProvider();
  firebase.auth().signInWithPopup(provider)
    .then(result => {
      console.log("‚úÖ P≈ôihl√°≈°en p≈ôes Google:", result.user.email);
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ p≈ôes Google:", error);
    });
}

// ‚úÖ P≈ôihl√°≈°en√≠ p≈ôes e-mail/heslo
function signInWithEmail() {
  const emailInput = document.getElementById("emailInput");
  const passwordInput = document.getElementById("passwordInput");
  if (!emailInput || !passwordInput) {
    console.warn("‚ö†Ô∏è Email nebo heslo input nebyl nalezen v DOM.");
    return;
  }
  const email = emailInput.value;
  const password = passwordInput.value;

  firebase.auth().signInWithEmailAndPassword(email, password)
    .then(userCredential => {
      console.log("‚úÖ P≈ôihl√°≈°en e-mailem:", userCredential.user.email);
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ e-mailem:", error);
    });
}

// ‚úÖ Odhl√°≈°en√≠
function signOut() {
  firebase.auth().signOut()
    .then(() => {
      console.log("üëã U≈æivatel byl odhl√°≈°en.");
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi odhl√°≈°en√≠:", error);
    });
}

// ‚úÖ Zmƒõna UI p≈ôi zmƒõnƒõ stavu p≈ôihl√°≈°en√≠
firebase.auth().onAuthStateChanged(user => {
  const loginSection = document.getElementById("login-section");
  const dashboardSection = document.getElementById("dashboard-section");
  const userNameSpan = document.getElementById("user-name");
  const loginPanel = document.getElementById("loginPanel");
  const userPanel = document.getElementById("userPanel");
  const userEmail = document.getElementById("userEmail");

  if (user) {
    console.log("üü¢ P≈ôihl√°≈°en jako:", user.email);

    if (loginSection) loginSection.style.display = "none";
    if (dashboardSection) dashboardSection.style.display = "block";
    if (userNameSpan) userNameSpan.textContent = user.displayName || user.email;

    if (loginPanel) loginPanel.style.display = "none";
    if (userPanel) userPanel.style.display = "block";
    if (userEmail) userEmail.textContent = user.email;

    // ‚úÖ Naƒç√≠st data a≈æ po p≈ôihl√°≈°en√≠
    if (typeof loadWeightLogFromFirestore === 'function') {
      loadWeightLogFromFirestore();
    }
  } else {
    console.log("üî¥ U≈æivatel odhl√°≈°en.");

    if (loginSection) loginSection.style.display = "block";
    if (dashboardSection) dashboardSection.style.display = "none";
    if (userNameSpan) userNameSpan.textContent = "";

    if (loginPanel) loginPanel.style.display = "block";
    if (userPanel) userPanel.style.display = "none";
    if (userEmail) userEmail.textContent = "";
  }
});

// ‚úÖ P≈ôid√°n√≠ listener≈Ø po naƒçten√≠ DOM

document.addEventListener("DOMContentLoaded", () => {
  const logoutBtn = document.getElementById("logout-button");
  const googleBtn = document.getElementById("google-login-button");
  const emailBtn = document.getElementById("login-button");

  if (logoutBtn) {
    logoutBtn.addEventListener("click", signOut);
  } else {
    console.warn("‚ö†Ô∏è logout-button nen√≠ v DOM.");
  }

  if (googleBtn) {
    googleBtn.addEventListener("click", signInWithGoogle);
  } else {
    console.warn("‚ö†Ô∏è google-login-button nenalezen.");
  }

  if (emailBtn) {
    emailBtn.addEventListener("click", signInWithEmail);
  }
});
