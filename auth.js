// === AUTH.JS: warp-ready p≈ôihla≈°ovac√≠ modul ===

// ‚ö†Ô∏è Inicializace Firebase (pokud je≈°tƒõ nen√≠)
if (typeof firebase === 'undefined' || !firebase.apps.length) {
  if (typeof initializeFirebaseApp === 'function') {
    initializeFirebaseApp();
  } else {
    console.error("‚ùå Funkce initializeFirebaseApp() nen√≠ definov√°na.");
  }
}

// ‚úÖ P≈ôihl√°≈°en√≠ p≈ôes Google
function signInWithGoogle() {
  const provider = new firebase.auth.GoogleAuthProvider();
  firebase.auth().signInWithPopup(provider)
    .then(result => {
      console.log("‚úÖ P≈ôihl√°≈°en p≈ôes Google:", result.user.email);
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ p≈ôes Google:", error);
    });
}

// ‚úÖ P≈ôihl√°≈°en√≠ p≈ôes e-mail/heslo
function signInWithEmail() {
  const email = document.getElementById("emailInput")?.value;
  const password = document.getElementById("passwordInput")?.value;

  if (!email || !password) {
    console.warn("‚ö†Ô∏è E-mail nebo heslo nebylo zad√°no.");
    return;
  }

  firebase.auth().signInWithEmailAndPassword(email, password)
    .then(userCredential => {
      console.log("‚úÖ P≈ôihl√°≈°en e-mailem:", userCredential.user.email);
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ e-mailem:", error);
    });
}

// ‚úÖ Odhl√°≈°en√≠
function signOut() {
  firebase.auth().signOut()
    .then(() => {
      console.log("üëã U≈æivatel byl odhl√°≈°en.");
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi odhl√°≈°en√≠:", error);
    });
}

// ‚úÖ NOV√Å FUNKCE: Naƒçte v≈°echna data po p≈ôihl√°≈°en√≠
async function loadAllUserData() {
  try {
    console.log("üì¶ Zaƒç√≠n√°m naƒç√≠tat u≈æivatelsk√° data...");
    
    // Naƒçti v≈°echna data paralelnƒõ
    const [weightData, settings, goals] = await Promise.all([
      loadWeightLogFromFirestore(),
      loadSettingsFromFirestore(),
      loadGoalsFromFirestore()
    ]);
    
    console.log("‚úÖ V√°hov√° data naƒçtena:", weightData);
    console.log("‚öôÔ∏è Nastaven√≠ naƒçtena:", settings);
    console.log("üéØ C√≠le naƒçteny:", goals);
    
    // Zavolej funkci pro zobrazen√≠ dat (pokud existuje)
    if (typeof loadData === 'function') {
      await loadData();
    }
    
    // Nebo zavolej jednotliv√© funkce pro aktualizaci UI
    if (typeof updateWeightChart === 'function') {
      updateWeightChart(weightData);
    }
    
    if (typeof applySettings === 'function') {
      applySettings(settings);
    }
    
    if (typeof updateGoalsDisplay === 'function') {
      updateGoalsDisplay(goals);
    }
    
    console.log("üéâ V≈°echna data naƒçtena a UI aktualizov√°no!");
    
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ u≈æivatelsk√Ωch dat:", error);
  }
}

// ‚úÖ Sledujeme stav p≈ôihl√°≈°en√≠ a mƒõn√≠me UI + naƒç√≠t√°me data
firebase.auth().onAuthStateChanged(async (user) => {
  const loginSection = document.getElementById("login-section");
  const dashboardSection = document.getElementById("dashboard-section");
  const userNameSpan = document.getElementById("user-name");
  const loginPanel = document.getElementById("loginPanel");
  const userPanel = document.getElementById("userPanel");
  const userEmail = document.getElementById("userEmail");

  if (user) {
    console.log("üü¢ P≈ôihl√°≈°en jako:", user.email);

    // UI p≈ôepnut√≠
    if (loginSection && dashboardSection && userNameSpan) {
      loginSection.style.display = "none";
      dashboardSection.style.display = "block";
      userNameSpan.textContent = user.displayName || user.email;
    }

    if (loginPanel && userPanel && userEmail) {
      loginPanel.style.display = "none";
      userPanel.style.display = "block";
      userEmail.textContent = user.email;
    }

    // ‚úÖ OPRAVA: Poƒçkej chv√≠li a pak naƒçti data
    // Firebase pot≈ôebuje chv√≠li na dokonƒçen√≠ inicializace
    setTimeout(async () => {
      await loadAllUserData();
    }, 500);

  } else {
    console.log("üî¥ U≈æivatel odhl√°≈°en.");

    if (loginSection && dashboardSection && userNameSpan) {
      loginSection.style.display = "block";
      dashboardSection.style.display = "none";
      userNameSpan.textContent = "";
    }

    if (loginPanel && userPanel && userEmail) {
      loginPanel.style.display = "block";
      userPanel.style.display = "none";
      userEmail.textContent = "";
    }
  }
});

// ‚úÖ Po naƒçten√≠ DOMu napoj√≠me tlaƒç√≠tka
document.addEventListener("DOMContentLoaded", () => {
  const googleBtn = document.getElementById("google-login-button");
  const emailBtn = document.getElementById("login-button");
  const logoutBtn = document.getElementById("logout-button");

  if (googleBtn) {
    googleBtn.addEventListener("click", signInWithGoogle);
  } else {
    console.warn("‚ö†Ô∏è google-login-button nenalezen.");
  }

  if (emailBtn) {
    emailBtn.addEventListener("click", signInWithEmail);
  }

  if (logoutBtn) {
    logoutBtn.addEventListener("click", signOut);
  } else {
    console.warn("‚ö†Ô∏è logout-button nen√≠ v DOM.");
  }
});

// ‚úÖ Glob√°ln√≠ funkce pro refresh dat
window.refreshUserData = loadAllUserData;
